@implements IDisposable

@inject INavigator Navigator
@inject NavigationManager NavigationManager
@inject IQueryParser QueryParser

<nav class="w-full border-b border-gray-300">
    <div class="ml-3">
        <div class="w-full md:max-w-6xl mx-auto flex flex-wrap items-center justify-between mt-0 py-3">

            <a href="#" class="select-none no-underline font-bold text-3xl text-black hover:text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-yellow-500 transition-all">
                OpenMod
            </a>

            <div class="w-full flex-grow sm:flex sm:items-center sm:w-auto">
                <ul class="text-gray-900 font-bold no-underline list-reset sm:flex pt-3 sm:pt-0 justify-end flex-1 items-center">
                    <li class="mr-1">
                        <a href="https://discord.gg/dXkJtb5yKJ" target="_blank" class="inline-block py-2 pl-0 pr-4 sm:px-4 text-black hover:text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-yellow-500 transition-all">Discord</a>
                    </li>
                    <li class="mr-1">
                        <a href="https://github.com/openmod/openmod" target="_blank" class="inline-block py-2 pl-0 pr-4 sm:px-4 text-black hover:text-transparent bg-clip-text bg-gradient-to-l from-pink-500 to-yellow-500 transition-all">GitHub</a>
                    </li>
                    <li class="mr-1">
                        <a href="https://openmod.github.io/openmod-docs/" target="_blank" class="inline-block py-2 pl-0 pr-4 sm:px-4 text-black hover:text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-yellow-500 transition-all">Documentation</a>
                    </li>
                </ul>
            </div>

        </div>
    </div>
</nav>

@code {

    public string SearchQuery { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        SetSearchQueryFromUriToTextBox();
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        SetSearchQueryFromUriToTextBox();
    }

    private void SetSearchQueryFromUriToTextBox()
    {
        QueryParser.Search(null, out _, out string query);
        SearchQuery = query;
    }

    private void SearchFieldKeyDownEventHandler(KeyboardEventArgs args)
    {
        if (args.Key.Equals("enter", StringComparison.OrdinalIgnoreCase))
        {
            Navigator.Search(page: 0, query: SearchQuery);
        }
    }

}
