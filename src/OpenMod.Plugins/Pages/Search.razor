@page "/search"

@implements IDisposable

@inject IQueryParser QueryParser
@inject IUriBuilder UriBuilder
@inject NavigationManager NavigationManager
@inject IPluginRepository PluginRepository
@inject OpenMod.Plugins.Shared.PageTitle.PageTitleState PageTitleState

@if (_pluginsResponce != null)
{
    @if (_currentPage > 0 && _pluginsResponce.Total > 0 && _pluginsResponce.Plugins.Count == 0)
    {
        <p>No plugins found on this page.</p>
    }
    else
    {
        foreach (var plugin in _pluginsResponce.Plugins)
        {
            <PluginItem Plugin=plugin />
        }
    }
}

@code
{
    private PluginsResponse? _pluginsResponce;
    private string? _previousPageLink;
    private string? _nextPageLink;
    private string _searchQuery = string.Empty;
    private int _currentPage;

    protected override async Task OnInitializedAsync()
    {
        PageTitleState.Title = "Loading...";

        await LoadPluginsAsync();

        PageTitleState.Title = _pluginsResponce!.Total + " plugins found";

        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task LoadPluginsAsync()
    {
        QueryParser.Search(null, out _currentPage, out _searchQuery);

        // todo: add pagination
        int pageSize = 500;

        _pluginsResponce = await PluginRepository.SearchAsync(
            query: _searchQuery,
            skip: _currentPage * pageSize,
            take: pageSize,
            includePrerelease: false);

        int lastPage = (int)((_pluginsResponce.Total + pageSize - 1) / pageSize) - 1;
        int previousPage = _currentPage > lastPage ? lastPage : _currentPage - 1;
        int nextPage = _currentPage + 1;

        _previousPageLink = _currentPage == 0 ? null : UriBuilder.Search(page: previousPage, query: _searchQuery);
        _nextPageLink = _currentPage >= lastPage ? null : UriBuilder.Search(page: nextPage, query: _searchQuery);
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        _pluginsResponce = null;
        StateHasChanged();

        await LoadPluginsAsync();
        StateHasChanged();
    }

}
